plugins {
    id 'java-library'
    id "idea"
    id 'jacoco-report-aggregation'
    id "com.adarshr.test-logger" version "4.0.0" apply(false)
    id "com.github.johnrengelman.shadow" version "8.1.1" apply(false)
    id 'ru.vyarus.java-lib' version '3.0.0' apply(false)
    id 'ru.vyarus.github-info' version '2.0.0' apply(false)
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'net.researchgate.release' version '3.0.2'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

group "io.kestra.plugin"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        if (isBuildSnapshot) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
        maven { url "https://maven.dremio.com/free/" }
        maven { url 'https://maven.jumpmind.com/repo/' }
        maven { url "https://talend-update.talend.com/nexus/content/repositories/libraries/" }
    }
}

subprojects {
    group "io.kestra.plugin"
    sourceCompatibility = 21
    targetCompatibility = 21

    apply plugin: "java-library"
    apply plugin: "idea"

    dependencies {
        // Platform
        annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
        implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
        api enforcedPlatform("io.kestra:platform:$kestraVersion")

        // Lombok
        annotationProcessor "org.projectlombok:lombok"
        compileOnly "org.projectlombok:lombok"

        // Micronaut
        compileOnly "io.micronaut:micronaut-http"
        compileOnly "io.micronaut.reactor:micronaut-reactor"

        // Kestra
        annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
        compileOnly group: "io.kestra", name: "core", version: kestraVersion

        implementation 'dev.langchain4j:langchain4j:1.0.0-alpha1'

        //Logs
        constraints {
            // Forced dependencies
            api("org.slf4j:slf4j-api:2.0.16")
        }
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    apply plugin: "com.adarshr.test-logger"

    test {
        useJUnitPlatform()

        // configure en_US default locale for tests
        systemProperty 'user.language', 'en'
        systemProperty 'user.country', 'US'
    }

    testlogger {
        theme "mocha-parallel"
        showExceptions true
        showFullStackTraces true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams true
    }

    dependencies {
        // Platform
        testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
        testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

        // lombok
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly 'org.projectlombok:lombok'

        // micronaut
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testImplementation "io.micronaut:micronaut-jackson-databind"
        testImplementation "io.micronaut.reactor:micronaut-reactor"

        // test deps needed only for to have a runner
        testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
        testImplementation group: "io.kestra", name: "core", version: kestraVersion
        testImplementation group: "io.kestra", name: "tests", version: kestraVersion
        testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

        // test
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.hamcrest:hamcrest"
        testImplementation "org.hamcrest:hamcrest-library"
        testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'

    }
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
subprojects {
    dependencies {
        testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
        testImplementation "io.qameta.allure:allure-junit5"
    }

    configurations {
        agent {
            canBeResolved = true
            canBeConsumed = true
        }
    }

    dependencies {
        agent "org.aspectj:aspectjweaver:1.9.22.1"
    }

    test {
        jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
    }
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
subprojects {
    apply plugin: 'jacoco'

    test {
        finalizedBy jacocoTestReport
    }
}

dependencies {
    jacocoAggregation subprojects
}

tasks.named('testCodeCoverageReport') {
    dependsOn = subprojects.test
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !isBuildSnapshot
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

subprojects { Project subproject ->
    apply plugin: "com.adarshr.test-logger"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'ru.vyarus.java-lib'

    github {
        user 'kestra-io'
        repository 'plugin-langchain'
        license 'Apache'
    }

    if (subproject.name != "plugin-langchain4j") {
        shadowJar {
            dependsOn(":plugin-langchain4j:shadowJar")
        }
    }

    maven.pom {
        developers {
            developer {
                id = "tchiotludo"
                name = "Ala Souid"
            }
        }
    }

    shadowJar {
        archiveClassifier.set(null)
        mergeServiceFiles()
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        // Suppression this validation error as we want to enforce the Kestra platform
        suppressedValidationErrors.add('enforced-platform')
    }
}


/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
